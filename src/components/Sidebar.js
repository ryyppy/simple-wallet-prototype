// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Icon = require("../common/Icon.js");
var Link = require("./Link.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Route = require("../common/Route.js");
var React = require("react");
var Network = require("../common/Network.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReasonReactRouter = require("reason-react/src/ReasonReactRouter.js");

function Sidebar$MyAccounts(Props) {
  var wallets = Props.wallets;
  var onWalletSelect = Props.onWalletSelect;
  var items = Belt_Array.map(wallets, (function (wallet) {
          var onClick = function (evt) {
            evt.preventDefault();
            return Belt_Option.forEach(onWalletSelect, (function (fn) {
                          return Curry._1(fn, wallet);
                        }));
          };
          return React.createElement("li", {
                      key: wallet.address,
                      className: "py-2 text-white-90-tr",
                      onClick: onClick
                    }, React.createElement("a", {
                          className: "cursor-pointer hover:text-white",
                          onClick: onClick
                        }, wallet.name));
        }));
  return React.createElement("div", undefined, React.createElement("h2", {
                  className: "text-10 font-bold text-white-50-tr uppercase"
                }, "My Wallets"), React.createElement("ul", {
                  className: "text-14 text-white-90-tr"
                }, items));
}

var MyAccounts = {
  make: Sidebar$MyAccounts
};

function Sidebar$MyPages(Props) {
  var url = ReasonReactRouter.useUrl(undefined, undefined);
  var route = Route.fromUrl(url);
  var pages = [
    [
      "Dashboard",
      /* Dashboard */0
    ],
    [
      "Transactions",
      /* Transactions */1
    ]
  ];
  var items = Belt_Array.map(pages, (function (param) {
          var target = param[1];
          var active = route === target ? "bg-blue" : "";
          var href = Route.toHref(target);
          return React.createElement("li", {
                      key: href,
                      className: active + " pl-8 py-2 text-white-90-tr"
                    }, React.createElement(Link.make, {
                          href: href,
                          children: param[0]
                        }));
        }));
  return React.createElement("div", undefined, React.createElement("h2", {
                  className: "pl-8 text-10 font-bold text-white-50-tr uppercase"
                }, "Pages"), React.createElement("ul", {
                  className: "text-14 text-white-90-tr"
                }, items));
}

var MyPages = {
  make: Sidebar$MyPages
};

function Sidebar$ConnectedBox(Props) {
  var status = Props.status;
  var match;
  match = status.TAG ? [
      "bg-red",
      Network.toString(status._0)
    ] : [
      "bg-green",
      Network.toString(status._0)
    ];
  return React.createElement("div", {
              className: "bg-white-10-tr"
            }, React.createElement("div", {
                  className: "w-4 h-4 " + match[0]
                }), match[1]);
}

var ConnectedBox = {
  make: Sidebar$ConnectedBox
};

function Sidebar$BurgerButton(Props) {
  var onClick = Props.onClick;
  return React.createElement("button", {
              className: "group",
              onClick: onClick
            }, React.createElement(Icon.Burger.make, {
                  className: "group-hover:text-white text-white-50-tr w-8"
                }));
}

var BurgerButton = {
  make: Sidebar$BurgerButton
};

function Sidebar$FullSidebar(Props) {
  var onBurgerButtonClick = Props.onBurgerButtonClick;
  var wallets = Props.wallets;
  var onWalletSelect = Props.onWalletSelect;
  return React.createElement("div", {
              className: "h-full min-h-screen bg-blue-dark"
            }, React.createElement("div", {
                  className: "h-12 w-full justify-between flex items-center border-b border-1 border-white-20-tr pl-8 pr-4",
                  style: {
                    minWidth: "16.5rem"
                  }
                }, React.createElement("span", {
                      className: "flex items-center"
                    }, React.createElement(Icon.Wallet.make, {
                          className: "text-blue w-6 h-auto"
                        }), React.createElement("span", {
                          className: "cursor-default text-16 text-white-90-tr ml-4"
                        }, "Wallet App")), React.createElement(Sidebar$BurgerButton, {
                      onClick: onBurgerButtonClick
                    })), React.createElement("div", {
                  className: "pl-8 pr-4 pt-12"
                }, React.createElement(Sidebar$MyAccounts, {
                      wallets: wallets,
                      onWalletSelect: onWalletSelect
                    })), React.createElement("div", {
                  className: "pt-12"
                }, React.createElement(Sidebar$MyPages, {})));
}

var FullSidebar = {
  make: Sidebar$FullSidebar
};

function Sidebar$CollapsedSidebar(Props) {
  var onBurgerButtonClick = Props.onBurgerButtonClick;
  return React.createElement("div", {
              className: "w-12 bg-blue-dark h-screen"
            }, React.createElement("div", {
                  className: "h-12 justify-center flex items-center w-full"
                }, React.createElement(Sidebar$BurgerButton, {
                      onClick: onBurgerButtonClick
                    })));
}

var CollapsedSidebar = {
  make: Sidebar$CollapsedSidebar
};

function Sidebar(Props) {
  var wallets = Props.wallets;
  var onWalletSelect = Props.onWalletSelect;
  var match = React.useState(function () {
        return false;
      });
  var setCollapsed = match[1];
  var onBurgerButtonClick = function (evt) {
    evt.preventDefault();
    return Curry._1(setCollapsed, (function (prev) {
                  return !prev;
                }));
  };
  if (match[0]) {
    return React.createElement(Sidebar$CollapsedSidebar, {
                onBurgerButtonClick: onBurgerButtonClick
              });
  } else {
    return React.createElement(Sidebar$FullSidebar, {
                onBurgerButtonClick: onBurgerButtonClick,
                wallets: wallets,
                onWalletSelect: onWalletSelect
              });
  }
}

var make = Sidebar;

exports.MyAccounts = MyAccounts;
exports.MyPages = MyPages;
exports.ConnectedBox = ConnectedBox;
exports.BurgerButton = BurgerButton;
exports.FullSidebar = FullSidebar;
exports.CollapsedSidebar = CollapsedSidebar;
exports.make = make;
/* Icon Not a pure module */
